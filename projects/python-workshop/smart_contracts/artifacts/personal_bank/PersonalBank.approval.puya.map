{
  "version": 3,
  "sources": [
    "../../personal_bank/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAIA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;AAAA;;AAuEK;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA5BA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA/BA;;AAAA;AAAA;AAAA;;AAAA;AAZL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAYK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZL;;AAAA;;;;;;;;;AAYA;;;AAcY;;AAAA;;AAAoB;;AAApB;AADJ;AAGO;;AAAA;;AAAA;AAAP;AAE+C;;AAAA;;AAAA;AAAtB;AAAA;;AAEjC;;;AACY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAK0B;AAC9B;;AAD8B;AACf;;;;;;;;;;;;;;AAAf;AAEO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;;AAAA;AANI;;AAAA;AAAA;;AAAA;AAAA;;;;AAkB2C;;AAAtB;AAAA;AAAA;AACzB;AAAA;AAES;AACI;;;;;;AADJ;;;AAGD;;;AAHC;;;AAMO;;AAAc;AAA9B;AAAA;AAEA;AAS8B;AACvB;AAAA;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.personal_bank.contract.PersonalBank.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock 0x151f7c75 0x6769746875625f626f78"
    },
    "23": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "25": {
      "op": "bz main_bare_routing@8",
      "stack_out": []
    },
    "28": {
      "op": "pushbytess 0x3298e7c0 0x3a395f2b 0x3e130eda // method \"deposit(pay)uint64\", method \"withdraw()uint64\", method \"get_github()string\"",
      "defined_out": [
        "Method(deposit(pay)uint64)",
        "Method(get_github()string)",
        "Method(withdraw()uint64)"
      ],
      "stack_out": [
        "Method(deposit(pay)uint64)",
        "Method(withdraw()uint64)",
        "Method(get_github()string)"
      ]
    },
    "45": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(deposit(pay)uint64)",
        "Method(get_github()string)",
        "Method(withdraw()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(deposit(pay)uint64)",
        "Method(withdraw()uint64)",
        "Method(get_github()string)",
        "tmp%2#0"
      ]
    },
    "48": {
      "op": "match main_deposit_route@5 main_withdraw_route@6 main_get_github_route@7",
      "stack_out": []
    },
    "56": {
      "block": "main_after_if_else@10",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "57": {
      "op": "return",
      "stack_out": []
    },
    "58": {
      "block": "main_get_github_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "60": {
      "op": "!",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "61": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "62": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "64": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "65": {
      "callsub": "smart_contracts.personal_bank.contract.PersonalBank.get_github",
      "op": "callsub get_github",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "68": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "0x151f7c75"
      ]
    },
    "69": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%18#0"
      ]
    },
    "70": {
      "op": "concat",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "71": {
      "op": "log",
      "stack_out": []
    },
    "72": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "73": {
      "op": "return",
      "stack_out": []
    },
    "74": {
      "block": "main_withdraw_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "76": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "77": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "78": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "80": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "81": {
      "callsub": "smart_contracts.personal_bank.contract.PersonalBank.withdraw",
      "op": "callsub withdraw",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "84": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "85": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "86": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "87": {
      "op": "concat",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "88": {
      "op": "log",
      "stack_out": []
    },
    "89": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "90": {
      "op": "return",
      "stack_out": []
    },
    "91": {
      "block": "main_deposit_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "93": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "94": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "95": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "97": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "98": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "100": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "1"
      ]
    },
    "101": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "102": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "103": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "105": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "106": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "107": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "108": {
      "callsub": "smart_contracts.personal_bank.contract.PersonalBank.deposit",
      "op": "callsub deposit",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "111": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "112": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "113": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "114": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "115": {
      "op": "log",
      "stack_out": []
    },
    "116": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "117": {
      "op": "return",
      "stack_out": []
    },
    "118": {
      "block": "main_bare_routing@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "120": {
      "op": "bnz main_after_if_else@10",
      "stack_out": []
    },
    "123": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "125": {
      "op": "!",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "126": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "127": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "128": {
      "op": "return",
      "stack_out": []
    },
    "129": {
      "subroutine": "smart_contracts.personal_bank.contract.PersonalBank.deposit",
      "params": {
        "pay_txn#0": "uint64"
      },
      "block": "deposit",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "132": {
      "op": "frame_dig -1",
      "defined_out": [
        "pay_txn#0 (copy)"
      ],
      "stack_out": [
        "pay_txn#0 (copy)"
      ]
    },
    "134": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "136": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "138": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "139": {
      "error": "Receiver must be the contract address",
      "op": "assert // Receiver must be the contract address",
      "stack_out": []
    },
    "140": {
      "op": "frame_dig -1",
      "stack_out": [
        "pay_txn#0 (copy)"
      ]
    },
    "142": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "144": {
      "op": "dup",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0"
      ]
    },
    "145": {
      "error": "Deposit amount must be greater than zero",
      "op": "assert // Deposit amount must be greater than zero",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "146": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%3#0",
        "pay_txn#0 (copy)"
      ]
    },
    "148": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "150": {
      "op": "dup",
      "defined_out": [
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "151": {
      "op": "box_get",
      "defined_out": [
        "deposited#0",
        "maybe_value%0#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "maybe_value%0#0",
        "deposited#0"
      ]
    },
    "152": {
      "op": "bury 1",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "deposited#0"
      ]
    },
    "154": {
      "op": "bz deposit_else_body@2",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "157": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "159": {
      "op": "dup",
      "defined_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "160": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "161": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "162": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value_converted%1#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0",
        "maybe_exists%1#0",
        "maybe_value_converted%1#0"
      ]
    },
    "163": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0",
        "maybe_value_converted%1#0",
        "maybe_exists%1#0"
      ]
    },
    "164": {
      "error": "check self.depositors entry exists",
      "op": "assert // check self.depositors entry exists",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0",
        "maybe_value_converted%1#0"
      ]
    },
    "165": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0",
        "maybe_value_converted%1#0",
        "tmp%3#0"
      ]
    },
    "167": {
      "op": "+",
      "defined_out": [
        "new_box_value%0#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0",
        "new_box_value%0#0"
      ]
    },
    "168": {
      "op": "itob",
      "defined_out": [
        "new_box_value%1#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0",
        "new_box_value%1#0"
      ]
    },
    "169": {
      "op": "box_put",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "170": {
      "block": "deposit_after_if_else@3",
      "stack_in": [
        "tmp%3#0",
        "tmp%5#0"
      ],
      "op": "bytec_1 // 0x6769746875625f626f78",
      "defined_out": [
        "0x6769746875625f626f78"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "0x6769746875625f626f78"
      ]
    },
    "171": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "{box_del}"
      ]
    },
    "172": {
      "op": "pop",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "173": {
      "op": "bytec_1 // 0x6769746875625f626f78",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "0x6769746875625f626f78"
      ]
    },
    "174": {
      "op": "pushbytes 0x000a4d696b65726e696b6572",
      "defined_out": [
        "0x000a4d696b65726e696b6572",
        "0x6769746875625f626f78"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "0x6769746875625f626f78",
        "0x000a4d696b65726e696b6572"
      ]
    },
    "188": {
      "op": "box_put",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "189": {
      "op": "frame_dig 1",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "191": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "192": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ]
    },
    "193": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value_converted%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "maybe_exists%2#0",
        "maybe_value_converted%2#0"
      ]
    },
    "194": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "maybe_value_converted%2#0",
        "maybe_exists%2#0"
      ]
    },
    "195": {
      "error": "check self.depositors entry exists",
      "op": "assert // check self.depositors entry exists",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "maybe_value_converted%2#0"
      ]
    },
    "196": {
      "op": "frame_bury 0"
    },
    "198": {
      "retsub": true,
      "op": "retsub"
    },
    "199": {
      "block": "deposit_else_body@2",
      "stack_in": [
        "tmp%3#0",
        "tmp%5#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%3#0"
      ]
    },
    "201": {
      "op": "itob",
      "defined_out": [
        "new_box_value%3#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "new_box_value%3#0"
      ]
    },
    "202": {
      "op": "frame_dig 1",
      "defined_out": [
        "new_box_value%3#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "new_box_value%3#0",
        "tmp%5#0"
      ]
    },
    "204": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0",
        "new_box_value%3#0"
      ]
    },
    "205": {
      "op": "box_put",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "206": {
      "op": "b deposit_after_if_else@3"
    },
    "209": {
      "subroutine": "smart_contracts.personal_bank.contract.PersonalBank.withdraw",
      "params": {},
      "block": "withdraw",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "211": {
      "op": "box_get",
      "defined_out": [
        "deposited#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "deposited#0"
      ]
    },
    "212": {
      "op": "swap",
      "stack_out": [
        "deposited#0",
        "maybe_value%0#0"
      ]
    },
    "213": {
      "op": "btoi",
      "defined_out": [
        "deposit_amt#0",
        "deposited#0"
      ],
      "stack_out": [
        "deposited#0",
        "deposit_amt#0"
      ]
    },
    "214": {
      "op": "swap",
      "stack_out": [
        "deposit_amt#0",
        "deposited#0"
      ]
    },
    "215": {
      "error": "No deposits found for this account",
      "op": "assert // No deposits found for this account",
      "stack_out": [
        "deposit_amt#0"
      ]
    },
    "216": {
      "op": "itxn_begin"
    },
    "217": {
      "op": "txn Sender",
      "defined_out": [
        "deposit_amt#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ],
      "stack_out": [
        "deposit_amt#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "219": {
      "op": "itxn_field Receiver"
    },
    "221": {
      "op": "itxn_field Amount",
      "stack_out": []
    },
    "223": {
      "op": "intc_0 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "pay"
      ]
    },
    "224": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "226": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "227": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "229": {
      "op": "itxn_submit"
    },
    "230": {
      "op": "itxn Amount",
      "defined_out": [
        "result.Amount#0"
      ],
      "stack_out": [
        "result.Amount#0"
      ]
    },
    "232": {
      "op": "txn Sender",
      "defined_out": [
        "result.Amount#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result.Amount#0",
        "tmp%2#0"
      ]
    },
    "234": {
      "op": "intc_1 // 0",
      "stack_out": [
        "result.Amount#0",
        "tmp%2#0",
        "0"
      ]
    },
    "235": {
      "op": "itob",
      "defined_out": [
        "new_box_value%0#0",
        "result.Amount#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result.Amount#0",
        "tmp%2#0",
        "new_box_value%0#0"
      ]
    },
    "236": {
      "op": "box_put",
      "stack_out": [
        "result.Amount#0"
      ]
    },
    "237": {
      "retsub": true,
      "op": "retsub"
    },
    "238": {
      "subroutine": "smart_contracts.personal_bank.contract.PersonalBank.get_github",
      "params": {},
      "block": "get_github",
      "stack_in": [],
      "op": "bytec_1 // 0x6769746875625f626f78",
      "defined_out": [
        "0x6769746875625f626f78"
      ],
      "stack_out": [
        "0x6769746875625f626f78"
      ]
    },
    "239": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "240": {
      "error": "check Box exists",
      "op": "assert // check Box exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "241": {
      "retsub": true,
      "op": "retsub"
    }
  }
}