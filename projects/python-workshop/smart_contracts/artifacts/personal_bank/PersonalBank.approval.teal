#pragma version 10
#pragma typetrack false

// smart_contracts.personal_bank.contract.PersonalBank.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 1 0
    bytecblock 0x676974687562 0x151f7c75
    // smart_contracts/personal_bank/contract.py:5
    // class PersonalBank(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@10
    pushbytess 0x1f9cca3d 0x3a395f2b 0x3e130eda 0xad82c2e7 0x7fa2d1c0 // method "deposit(string)void", method "withdraw()uint64", method "get_github()string", method "exist_github_box()bool", method "key_box_example()void"
    txna ApplicationArgs 0
    match main_deposit_route@5 main_withdraw_route@6 main_get_github_route@7 main_exist_github_box_route@8 main_key_box_example_route@9

main_after_if_else@12:
    // smart_contracts/personal_bank/contract.py:5
    // class PersonalBank(ARC4Contract):
    intc_1 // 0
    return

main_key_box_example_route@9:
    // smart_contracts/personal_bank/contract.py:92
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_exist_github_box_route@8:
    // smart_contracts/personal_bank/contract.py:87
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub exist_github_box
    pushbytes 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_get_github_route@7:
    // smart_contracts/personal_bank/contract.py:82
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_github
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_withdraw_route@6:
    // smart_contracts/personal_bank/contract.py:58
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub withdraw
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_deposit_route@5:
    // smart_contracts/personal_bank/contract.py:16
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/personal_bank/contract.py:5
    // class PersonalBank(ARC4Contract):
    txna ApplicationArgs 1
    // smart_contracts/personal_bank/contract.py:16
    // @abimethod()
    callsub deposit
    intc_0 // 1
    return

main_bare_routing@10:
    // smart_contracts/personal_bank/contract.py:5
    // class PersonalBank(ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@12
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// smart_contracts.personal_bank.contract.PersonalBank.deposit(github: bytes) -> void:
deposit:
    // smart_contracts/personal_bank/contract.py:16-17
    // @abimethod()
    // def deposit(self, github: arc4.String) -> None:
    proto 1 0
    // smart_contracts/personal_bank/contract.py:21-22
    // # Store GitHub handle
    // self.github.value = github
    bytec_0 // 0x676974687562
    box_del
    pop
    bytec_0 // 0x676974687562
    frame_dig -1
    box_put
    retsub


// smart_contracts.personal_bank.contract.PersonalBank.withdraw() -> uint64:
withdraw:
    // smart_contracts/personal_bank/contract.py:68
    // deposit_amt, deposited = self.depositors.maybe(Txn.sender)
    txn Sender
    box_get
    swap
    btoi
    // smart_contracts/personal_bank/contract.py:69
    // assert deposited, "No deposits found for this account"
    swap
    assert // No deposits found for this account
    // smart_contracts/personal_bank/contract.py:71-75
    // result = itxn.Payment(
    //     receiver=Txn.sender,
    //     amount=deposit_amt,
    //     fee=0,
    // ).submit()
    itxn_begin
    // smart_contracts/personal_bank/contract.py:72
    // receiver=Txn.sender,
    txn Sender
    itxn_field Receiver
    itxn_field Amount
    // smart_contracts/personal_bank/contract.py:71
    // result = itxn.Payment(
    intc_0 // pay
    itxn_field TypeEnum
    // smart_contracts/personal_bank/contract.py:74
    // fee=0,
    intc_1 // 0
    itxn_field Fee
    // smart_contracts/personal_bank/contract.py:71-75
    // result = itxn.Payment(
    //     receiver=Txn.sender,
    //     amount=deposit_amt,
    //     fee=0,
    // ).submit()
    itxn_submit
    itxn Amount
    // smart_contracts/personal_bank/contract.py:77
    // self.depositors[Txn.sender] = UInt64(0)
    txn Sender
    intc_1 // 0
    itob
    box_put
    // smart_contracts/personal_bank/contract.py:79
    // return result.amount
    retsub


// smart_contracts.personal_bank.contract.PersonalBank.get_github() -> bytes:
get_github:
    // smart_contracts/personal_bank/contract.py:84
    // return self.github.value
    bytec_0 // 0x676974687562
    box_get
    assert // check self.github exists
    retsub


// smart_contracts.personal_bank.contract.PersonalBank.exist_github_box() -> uint64:
exist_github_box:
    // smart_contracts/personal_bank/contract.py:89
    // return bool(bool(self.github))
    bytec_0 // 0x676974687562
    box_len
    bury 1
    retsub
