{
    "name": "PersonalBank",
    "structs": {},
    "methods": [
        {
            "name": "deposit",
            "args": [
                {
                    "type": "pay",
                    "name": "pay_txn",
                    "desc": "The payment transaction containing deposit information"
                }
            ],
            "returns": {
                "type": "uint64",
                "desc": "The total amount deposited by the sender after this transaction (as UInt64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Deposits funds into the personal bank\nThis method accepts a payment transaction and records the deposit amount in the sender's BoxMap. If the sender already has a deposit, the amount is added to their existing balance.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdraw",
            "args": [],
            "returns": {
                "type": "uint64",
                "desc": "The amount withdrawn (as UInt64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Withdraws all funds from the sender's account\nThis method transfers the entire balance of the sender's account back to them, and resets their balance to zero. The sender must have a deposit to withdraw.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_github",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "exist_github_box",
            "args": [],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "key_box_example",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {
                "github": {
                    "keyType": "AVMBytes",
                    "valueType": "string",
                    "key": "Z2l0aHViX2JveA=="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "depositors": {
                    "keyType": "address",
                    "valueType": "uint64",
                    "prefix": ""
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        191
                    ],
                    "errorMessage": "Deposit amount must be greater than zero"
                },
                {
                    "pc": [
                        261
                    ],
                    "errorMessage": "No deposits found for this account"
                },
                {
                    "pc": [
                        75,
                        84,
                        107,
                        123,
                        140
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        185
                    ],
                    "errorMessage": "Receiver must be the contract address"
                },
                {
                    "pc": [
                        172
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        78,
                        87,
                        110,
                        126,
                        143
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        210,
                        241
                    ],
                    "errorMessage": "check self.depositors entry exists"
                },
                {
                    "pc": [
                        286
                    ],
                    "errorMessage": "check self.github exists"
                },
                {
                    "pc": [
                        153
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiACAQAmAgQVH3x1CmdpdGh1Yl9ib3gxG0EAiIIFBDKY58AEOjlfKwQ+Ew7aBK2CwucEf6LRwDYaAI4FAEMAMgAiAAsAAiNDMRkURDEYRCJDMRkURDEYRIgAxYABACNPAlQoTFCwIkMxGRREMRhEiACqKExQsCJDMRkURDEYRIgAfRYoTFCwIkMxGRREMRhEMRYiCUk4ECISRIgAEhYoTFCwIkMxGUD/nTEYFEQiQ4oBAYv/OAcyChJEi/84CElEi/84AEm+RQFBACqLAUm+TBdMRIsACBa/KbxIKYAMAApNaWtlcm5pa2Vyv4sBvkwXTESMAImLABaLAUy/Qv/ZMQC+TBdMRLExALIHsggishAjsgGztAgxACMWv4kpvkSJKb1FAYk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}